-- PRODUCTS TABLE
CREATE TABLE Products (
    product_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    product_name VARCHAR2(100) NOT NULL,
    category VARCHAR2(50) NOT NULL,
    price NUMBER(10,2) CHECK (price > 0),
    stock_quantity NUMBER DEFAULT 0 CHECK (stock_quantity >= 0)
);

-- CUSTOMERS TABLE
CREATE TABLE Customers (
    customer_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    first_name VARCHAR2(50) NOT NULL,
    last_name VARCHAR2(50) NOT NULL,
    email VARCHAR2(100) UNIQUE NOT NULL,
    phone VARCHAR2(15)
);

-- ORDERS TABLE
CREATE TABLE Orders (
    order_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    customer_id NUMBER NOT NULL,
    order_date DATE DEFAULT SYSDATE,
    total_amount NUMBER(10,2) DEFAULT 0 CHECK (total_amount >= 0),
    CONSTRAINT fk_customer FOREIGN KEY (customer_id)
        REFERENCES Customers(customer_id)
);

-- ORDERDETAILS TABLE
CREATE TABLE OrderDetails (
    order_detail_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    order_id NUMBER NOT NULL,
    product_id NUMBER NOT NULL,
    quantity NUMBER CHECK (quantity > 0),
    CONSTRAINT fk_order FOREIGN KEY (order_id)
        REFERENCES Orders(order_id),
    CONSTRAINT fk_product FOREIGN KEY (product_id)
        REFERENCES Products(product_id)
);

-- INSERT PRODUCTS
INSERT INTO Products (product_name, category, price, stock_quantity)
VALUES ('Dell Inspiron Laptop', 'Laptop', 65000, 50);

INSERT INTO Products (product_name, category, price, stock_quantity)
VALUES ('Sony Headphones', 'Accessories', 2500, 15);

-- INSERT CUSTOMERS
INSERT INTO Customers (first_name, last_name, email, phone)
VALUES ('Ravi', 'Kumar', 'ravi.kumar@gmail.com', '9876543210');

INSERT INTO Customers (first_name, last_name, email, phone)
VALUES ('Anita', 'Sharma', 'anita.sharma@gmail.com', '8765432109');

-- INSERT ORDERS
INSERT INTO Orders (customer_id, total_amount)
VALUES (1, 67500);

INSERT INTO Orders (customer_id, total_amount)
VALUES (2, 5000);

-- INSERT ORDER DETAILS
INSERT INTO OrderDetails (order_id, product_id, quantity)
VALUES (1, 1, 1);  -- Ravi buys 1 Laptop

INSERT INTO OrderDetails (order_id, product_id, quantity)
VALUES (1, 2, 1);  -- Ravi buys 1 Headphone

INSERT INTO OrderDetails (order_id, product_id, quantity)
VALUES (2, 2, 2);  -- Anita buys 2 Headphones

--a. List products with low stock (< 20 units)

SELECT product_id, product_name, stock_quantity
FROM Products
WHERE stock_quantity < 20;

--b. Calculate total amount spent by each customer
SELECT c.first_name || ' ' || c.last_name AS Customer_Name,
       SUM(o.total_amount) AS Total_Spending
FROM Customers c
JOIN Orders o ON c.customer_id = o.customer_id
GROUP BY c.first_name, c.last_name;

--c. Update stock after orders (reduce inventory)
UPDATE Products p
SET stock_quantity = stock_quantity -
    (SELECT SUM(od.quantity)
     FROM OrderDetails od
     WHERE od.product_id = p.product_id)
WHERE product_id IN (SELECT product_id FROM OrderDetails);

--d. View updated inventory
SELECT product_name, stock_quantity
FROM Products;
